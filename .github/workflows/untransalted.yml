name: check untranslated

on:
  # schedule:
  # - cron: ""
  workflow_dispatch:

env:
  file_untranslated_name: "untranslated.txt" # when it, also change jobs.publish_untranslated.with.filename

jobs:
  check_untranslated:
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: cache and checkout mdn/translated-content
        id: get-translated-content
        uses: ./.github/actions/cached-checkout
        with:
          repo: mdn/translated-content
          path: translated-content

      - name: cache and checkout mdn/content
        id: get-content
        uses: ./.github/actions/cached-checkout
        with:
          repo: mdn/content
          path: content

      - name: Cache ${{ env.file_untranslated_name }}
        id: cache
        uses: actions/cache@v4
        with:
          path: ${{ env.file_untranslated_name }}
          key: check untranslated output ${{ steps.get-translated-content.outputs.latest-hash }}~${{ steps.get-content.outputs.latest-hash }}

      - if: steps.cache.outputs.cache-hit != 'true'
        name: run script
        run: |
          $en_folder = (Resolve-Path -Path "content\files\en-us").Path
          $translation_mu = (Resolve-Path -Path "translated-content\files\$lang").Path
          
          $lang = "zh-cn"
          $translation_si = Join-Path -Path $translations -ChildPath $lang
          
          Get-ChildItem -Path $en_folder -Recurse -File -Filter "*.md" | `
          Select-Object -ExpandProperty FullName | `
          ForEach-Object {
              $relativePath = [System.IO.Path]::GetRelativePath($en_folder, $_)
              $translation_file = Join-Path -Path $translation_si -ChildPath $relative_path
              
              if (!(Test-Path -Path $translation_file)) {
                  [System.IO.Path]::GetRelativePath($translation_mu,$translation_si)
              }
          } | Out-File -FilePath "${{ env.file_untranslated_name }}" -Encoding UTF8

      - if: steps.cache.outputs.cache-hit != 'true'
        name: publish
        uses: ./.github/actions/publish
        with:
          filename: ${{ env.file_untranslated_name }}
          ACCOUNT_TOKEN_GIST: ${{ secrets.ACCOUNT_TOKEN_GIST }}
          TARGET_GIST_ID: ${{ vars.TARGET_GIST_ID }}
