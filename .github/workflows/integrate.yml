name: integrate 4 files

on:
  schedule:
    - cron: "42 22 * * 2,6"
  workflow_dispatch:

env:
  file_distances_name: "distances.csv"
  file_no_sourceCommit_name: "no_sourceCommit.txt"
  file_last_date_name: "last_commit_date.csv"
  file_untranslated_name: "untranslated.txt" # when change names, also change /integrate.py

jobs:
  main:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
          
      - run: pip install -r requirements.txt
      
      - name: cache and checkout mdn/translated-content (depth 0)
        uses: ./.github/actions/cached-checkout
        with:
          repo: mdn/translated-content
          path: translated-content
          fetch-depth: 0

      - name: cache and checkout mdn/content (depth 0)
        id: get-content
        uses: ./.github/actions/cached-checkout
        with:
          repo: mdn/content
          path: content
          fetch-depth: 0

      - name: check last commit date
        run: |
          $logFile = "md_logs.txt"
          $targetFiles = "current_files.txt"
          $env:GIT_DIR = ".\translated-content\.git"
          $env:GIT_WORK_TREE = ".\translated-content"
          
          git log --format=%ad --date=short --name-only | Out-File -FilePath $logFile -Encoding ascii
          git ls-files *.md | Out-File -FilePath $targetFiles -Encoding ascii
          python get_last_commit_dates.py $logFile ${{env.file_last_date_name}} $targetFiles
          rm $logFile
          rm $targetFiles

      - name: check sourceCommit and untranslated
        run: |
          $languages = "es", "fr", "ja", "ko", "pt-br", "ru", "zh-cn", "zh-tw"
          $env:GIT_DIR = ".\content\.git"
          $env:GIT_WORK_TREE = ".\content"
          $en_folder = (Resolve-Path -Path "content\files\en-us").Path
          $translation_mu = (Resolve-Path -Path "translated-content\files\").Path
          
          $languages | ForEach-Object {
              $x = Join-Path -Path $translation_mu -ChildPath $_
              if (!(Test-Path -Path  $x)) {
                  throw "path error: language code. Announced $languages, but $x is not found."
              }
          }
          
          $commitDistances = [System.Collections.Generic.List[PSObject]]::new()
          $badFrontMatter = [System.Collections.Generic.List[String]]::new()
          $untranslated = [System.Collections.Generic.List[String]]::new()
          
          $en_files = Get-ChildItem -Path $en_folder -Recurse -File -Filter "*.md" | `
          Select-Object -ExpandProperty FullName
          
          foreach($lang in $languages) {
              write-host "Starting $lang"
              ForEach($en_file in $en_files){
                  $relative_path = [System.IO.Path]::GetRelativePath($en_folder, $en_file)
                  $translation_file = Join-Path -Path $translation_mu -ChildPath "$lang\$relative_path"
                  
                  if (!(Test-Path -Path $translation_file)) {
                      $untranslated.add("$lang\$relative_path")
                      continue
                  }
                  
                  $file_start = -join (Get-Content -Path $translation_file -TotalCount 6)
                  if (!($file_start -match "\s{1,}sourceCommit:\s?([0-9a-f]{40})")) {
                      $badFrontMatter.add("$lang\$relative_path")
                      continue
                  }
                  $commitDistances.add([PSCustomObject]@{
                      File = "$lang\$relative_path"
                      Distance = git rev-list --count "$($Matches[1])..HEAD" -- "$en_file"
                  })
          
              }
              write-host "Finished $lang"
              write-host "$($commitDistances.Count) files have sourceCommit, badFrontMatter $($badFrontMatter.Count), untranslated $($untranslated.Count)"
          }
          
          $commitDistances.ToArray() | Export-Csv -Path ${{ env.file_distances_name }} -NoTypeInformation
          $badFrontMatter | Out-File -FilePath ${{ env.file_no_sourceCommit_name }} -Encoding ascii
          $untranslated | Export-Csv -Path ${{ env.file_untranslated_name }} -NoTypeInformation
    
      - name: integrate
        run: |
          mkdir output
          python integrate.py

      - if: github.event_name == 'workflow_dispatch'
        run: ls

      - uses: actions/upload-artifact@v4
        id: artifact-upload
        with:
          name: output
          path: "output"

      - name: Output artifact ID
        run: |
          echo 'Artifact URL is ${{ steps.artifact-upload.outputs.artifact-url }}'
          echo ${{ steps.artifact-upload.outputs.artifact-url }} > URL.txt
          gc URL.txt
      
      - name: publish
        uses: ./.github/actions/publish
        with:
          filename: URL.txt
          ACCOUNT_TOKEN_GIST: ${{ secrets.ACCOUNT_TOKEN_GIST }}
          TARGET_GIST_ID: ${{ vars.TARGET_GIST_ID }}
