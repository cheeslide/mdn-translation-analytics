name: integrate 4 files

on:
  schedule:
    - cron: "42 22 * * 2,6"
  workflow_dispatch:

env:
  file_distances_name: "distances.csv"
  file_no_sourceCommit_name: "no_sourceCommit.txt"
  file_last_date_name: "last_commit_date.csv"
  file_untranslated_name: "untranslated.txt" # when change names, also change /integrate.py

jobs:
  main:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
          
      - run: pip install -r requirements.txt
      
      - name: cache and checkout mdn/translated-content (depth 0)
        uses: ./.github/actions/cached-checkout
        with:
          repo: mdn/translated-content
          path: translated-content
          fetch-depth: 0

      - name: cache and checkout mdn/content (depth 0)
        id: get-content
        uses: ./.github/actions/cached-checkout
        with:
          repo: mdn/content
          path: content
          fetch-depth: 0

      

      - name: check last commit date
        run: |
          $logFile = "md_logs.txt"
          $targetFiles = "current_files.txt"
          $env:GIT_DIR = ".\translated-content\.git"
          $env:GIT_WORK_TREE = ".\translated-content"
          
          git log --format=%ad --date=short --name-only | Out-File -FilePath $logFile -Encoding ascii
          git ls-files *.md | Out-File -FilePath $targetFiles -Encoding ascii
          python get_last_commit_dates.py $logFile ${{env.file_last_date_name}} $targetFiles
          rm $logFile
          rm $targetFiles
          
      - name: check sourceCommit and untranslated
        run: |
          $maxConcurrentJobs = 16
          $maxPackCapacity = 4
          
          $languages = "es", "fr", "ja", "ko", "pt-br", "ru", "zh-cn", "zh-tw"
          $env:GIT_DIR = ".\content\.git"
          $env:GIT_WORK_TREE = ".\content"
          $en_folder = (Resolve-Path -Path "content\files\en-us").Path
          $translation_mu = (Resolve-Path -Path "translated-content\files\").Path
          
          $untranslated = New-Object System.Collections.ArrayList
          $badFrontMatter = New-Object System.Collections.ArrayList
          $commitDistances = New-Object System.Collections.ArrayList
          
          function Merge-Result($result) {
              Write-Host "3 Untranslated type: $($result.untranslated.GetType().FullName), BadFrontMatter type: $($result.badFrontMatter.GetType().FullName), CommitDistances type: $($result.commitDistances.GetType().FullName)"

              $untranslated.AddRange($result.untranslated)
              $badFrontMatter.AddRange($result.badFrontMatter)
              $commitDistances.AddRange($result.commitDistances)
              return $true
          }
          
          $en_files = Get-ChildItem -Path $en_folder -Recurse -File -Filter "*.md" | `
          Select-Object -ExpandProperty FullName |`
          ForEach-Object {
              [System.IO.Path]::GetRelativePath($en_folder, $_)
          }
          
          # tasks是translation_files的相对路径
          $tasks = New-Object System.Collections.Generic.List[String]
          foreach($en_file in $en_files) {
              foreach($lang in $languages) {
                  $tasks.add("$lang\$en_file")
              }
          }
          
          $jobs = New-Object System.Collections.Generic.List[System.Management.Automation.Job]
          
          write-host "Total tasks: $($tasks.Count)"
          write-host "Start processing..."
          
          # 循环并启动任务
          while ($tasks.Count) {
              # 等待直到后台任务数量少于最大并发数
              while ($jobs.Count -ge $maxConcurrentJobs) {
                  # 检查是否有任务完成，如果有则移除
                  $completedJobs = $jobs | Where-Object { $_.State -eq 'Completed' }
                  $completedJobs | ForEach-Object {
                      $result = $(Receive-Job -Job $_ -Wait)
                      
                      Write-Host "2 Untranslated type: $($result.untranslated.GetType().FullName), BadFrontMatter type: $($result.badFrontMatter.GetType().FullName), CommitDistances type: $($result.commitDistances.GetType().FullName)"
                      
                      Merge-Result $result
                      Remove-Job -Job $_
                      $jobs.Remove($_)
          
                      Write-Host "2 Result Untranslated: $($result.untranslated)"
                  }
                  Start-Sleep -Seconds 1
              }
              
              # 开始创建新job
              $packCapacity = [math]::Min($maxPackCapacity, $tasks.Count)
              $taskPack = $tasks[0..($packCapacity - 1)]
              $tasks.RemoveRange(0, $packCapacity)
              
              $job = Start-Job -ArgumentList $taskPack, $en_folder, $translation_mu -ScriptBlock {
                  param($taskPack, $en_folder, $translation_mu)
                  $untranslated = New-Object System.Collections.Generic.List[String]
                  $badFrontMatter = New-Object System.Collections.Generic.List[String]
                  $commitDistances = New-Object System.Collections.Generic.List[PSObject]
                  
                  foreach ($relative_path in $taskPack) {
                      $translation_file = Join-Path -Path $translation_mu -ChildPath $relative_path
                      $en_file = Join-Path -Path $en_folder -ChildPath $relative_path
          
                      if (!(Test-Path -Path $translation_file)) {
                          $untranslated.add($relative_path)
                          continue
                      }
                      
                      $file_start = -join (Get-Content -Path $translation_file -TotalCount 6)
                      if (!($file_start -match "\s{1,}sourceCommit:\s?([0-9a-f]{40})")) {
                          $badFrontMatter.add($relative_path)
                          continue
                      }
                      $commitDistances.add([PSCustomObject]@{
                          File = $relative_path
                          Distance = $(git rev-list --count "$($Matches[1])..HEAD" -- "$en_file")
                      })
                  }
                  Write-Host "t Untranslated type: $($untranslated.GetType().FullName), BadFrontMatter type: $($badFrontMatter.GetType().FullName), CommitDistances type: $($commitDistances.GetType().FullName)"

                  return @{
                      untranslated = $untranslated
                      badFrontMatter = $badFrontMatter
                      commitDistances = $commitDistances
                  }
              }
              $jobs.Add($job)
          
              write-host "tasks left: $($tasks.Count)"
          }
          
          write-host "All jobs started, waiting for completion..."
          
          # 等待所有任务完成并获取结果
          $jobs | ForEach-Object {
              Merge-Result(Receive-Job -Job $_ -Wait)
              Remove-Job -Job $_
              $jobs.Remove($_)
          }
          
          $commitDistances.ToArray() | Export-Csv -Path ${{ env.file_distances_name }} -NoTypeInformation
          $badFrontMatter | Out-File -FilePath ${{ env.file_no_sourceCommit_name }} -Encoding ascii
          $untranslated | Out-File -FilePath ${{ env.file_untranslated_name }} -Encoding ascii

    
      - name: integrate
        run: |
          mkdir output
          python integrate.py

      - if: github.event_name == 'workflow_dispatch'
        run: ls

      - uses: actions/upload-artifact@v4
        id: artifact-upload
        with:
          name: output
          path: "output"

      - name: Output artifact ID
        run: |
          echo 'Artifact URL is ${{ steps.artifact-upload.outputs.artifact-url }}'
          echo ${{ steps.artifact-upload.outputs.artifact-url }} > URL.txt
          gc URL.txt
      
      - name: publish
        uses: ./.github/actions/publish
        with:
          filename: URL.txt
          ACCOUNT_TOKEN_GIST: ${{ secrets.ACCOUNT_TOKEN_GIST }}
          TARGET_GIST_ID: ${{ vars.TARGET_GIST_ID }}
